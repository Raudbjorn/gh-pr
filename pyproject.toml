[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gh-pr"
version = "0.1.0"
description = "A powerful GitHub PR review tool with advanced filtering and automation"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Raudbjorn" }
]
keywords = ["github", "pull-request", "cli", "review", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Version Control :: Git",
]

dependencies = [
    "click>=8.1.0",
    "PyGithub>=2.1.0",
    "rich>=13.0.0",
    "textual>=0.40.0",
    "tomli>=2.0.0; python_version < '3.11'",
    "tomli-w>=1.0.0",
    "diskcache>=5.6.0",
    "python-dateutil>=2.8.0",
    "requests>=2.31.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.0.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "types-requests",
    "types-python-dateutil",
    "types-pyyaml",
]

[project.scripts]
gh-pr = "gh_pr.cli:main"

[project.urls]
Homepage = "https://github.com/Raudbjorn/gh-pr"
Issues = "https://github.com/Raudbjorn/gh-pr/issues"

[tool.hatch.build]
packages = ["src/gh_pr"]

[tool.hatch.build.targets.wheel]
packages = ["src/gh_pr"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"tests/**" = ["D", "S101", "S105", "S106"]  # Don't require docstrings in tests, allow asserts and test tokens

[tool.black]
line-length = 100
target-version = ['py39']

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src/gh_pr",
    "--cov-report=term-missing",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--color=yes",
    "--durations=10"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "graphql: Tests for GraphQL functionality",
    "batch: Tests for batch operations",
    "export: Tests for export functionality",
    "phase4: Tests for Phase 4 features",
    "phase5: Tests for Phase 5 features"
]

[tool.coverage.run]
source = ["src/gh_pr"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == \"__main__\":",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]